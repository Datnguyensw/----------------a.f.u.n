//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34014.
// 
#pragma warning disable 1591

namespace aFun.CoreData {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceCoreSoap", Namespace="http://tempuri.org/")]
    public partial class ServiceCore : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback uploadAvatarOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback PayServiceOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ServiceCore() {
            this.Url = global::aFun.Properties.Settings.Default.aFun_CoreData_ServiceCore;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event uploadAvatarCompletedEventHandler uploadAvatarCompleted;
        
        /// <remarks/>
        public event ProServiceCompletedEventHandler ProServiceCompleted;
        
        /// <remarks/>
        public event PayServiceCompletedEventHandler PayServiceCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/uploadAvatar", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string uploadAvatar([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] avatar, string Header, string Body, string Footer) {
            object[] results = this.Invoke("uploadAvatar", new object[] {
                        avatar,
                        Header,
                        Body,
                        Footer});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void uploadAvatarAsync(byte[] avatar, string Header, string Body, string Footer) {
            this.uploadAvatarAsync(avatar, Header, Body, Footer, null);
        }
        
        /// <remarks/>
        public void uploadAvatarAsync(byte[] avatar, string Header, string Body, string Footer, object userState) {
            if ((this.uploadAvatarOperationCompleted == null)) {
                this.uploadAvatarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnuploadAvatarOperationCompleted);
            }
            this.InvokeAsync("uploadAvatar", new object[] {
                        avatar,
                        Header,
                        Body,
                        Footer}, this.uploadAvatarOperationCompleted, userState);
        }
        
        private void OnuploadAvatarOperationCompleted(object arg) {
            if ((this.uploadAvatarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.uploadAvatarCompleted(this, new uploadAvatarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProService(string Header, string Body, string Footer) {
            object[] results = this.Invoke("ProService", new object[] {
                        Header,
                        Body,
                        Footer});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProServiceAsync(string Header, string Body, string Footer) {
            this.ProServiceAsync(Header, Body, Footer, null);
        }
        
        /// <remarks/>
        public void ProServiceAsync(string Header, string Body, string Footer, object userState) {
            if ((this.ProServiceOperationCompleted == null)) {
                this.ProServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProServiceOperationCompleted);
            }
            this.InvokeAsync("ProService", new object[] {
                        Header,
                        Body,
                        Footer}, this.ProServiceOperationCompleted, userState);
        }
        
        private void OnProServiceOperationCompleted(object arg) {
            if ((this.ProServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProServiceCompleted(this, new ProServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PayService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PayService(string Header, string Body, string footer) {
            object[] results = this.Invoke("PayService", new object[] {
                        Header,
                        Body,
                        footer});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PayServiceAsync(string Header, string Body, string footer) {
            this.PayServiceAsync(Header, Body, footer, null);
        }
        
        /// <remarks/>
        public void PayServiceAsync(string Header, string Body, string footer, object userState) {
            if ((this.PayServiceOperationCompleted == null)) {
                this.PayServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPayServiceOperationCompleted);
            }
            this.InvokeAsync("PayService", new object[] {
                        Header,
                        Body,
                        footer}, this.PayServiceOperationCompleted, userState);
        }
        
        private void OnPayServiceOperationCompleted(object arg) {
            if ((this.PayServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PayServiceCompleted(this, new PayServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void uploadAvatarCompletedEventHandler(object sender, uploadAvatarCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class uploadAvatarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal uploadAvatarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ProServiceCompletedEventHandler(object sender, ProServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void PayServiceCompletedEventHandler(object sender, PayServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PayServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PayServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591